{"version":3,"sources":["components/War.js","components/Deck.js","App.js","serviceWorker.js","index.js"],"names":["War","props","compareCards","player","bot","updateDeck","pop","war","card1","card2","warring","arr","index","playerCard","length","botCard","console","log","warHelper","playerWon","playerDeck","botDeck","i","push","warUpdate","handleNewGame","newGame","handlePlaceCard","state","Button","onClick","Component","Deck","popPlayerDecks","play","setState","unshift","updateDecks","value1","value2","generateNewDeck","j","shuffle","slice","array","Math","floor","random","this","map","card","CardBody","value","Card","variant","border","Body","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dea98aa6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nexport default class War extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    compareCards = (player, bot) => {\r\n        if (player > bot) {\r\n            this.props.updateDeck(player, bot, true);\r\n            this.props.pop()\r\n        } else if (player === bot) {\r\n            this.war(player, bot)\r\n        } else {\r\n            this.props.updateDeck(bot, player, false);\r\n            this.props.pop();\r\n        }\r\n    }\r\n\r\n    war = (card1, card2) => {\r\n        let warring = true;\r\n        let arr = [card1, card2];\r\n        let index = 5;\r\n        while (warring) {\r\n            let playerCard = this.props.player[this.props.player.length - index];\r\n            let botCard = this.props.bot[this.props.bot.length - index];\r\n            console.log(\"player: \" + playerCard);\r\n            console.log(\"bot: \" + botCard);\r\n            if (playerCard > botCard) {\r\n                console.log(\"player won\")\r\n                this.warHelper(arr, true, index);\r\n                warring = false;\r\n            } else if (playerCard === botCard) {\r\n                console.log(\"tie\")\r\n                index += 4;\r\n            } else {\r\n                console.log(\"bot won\")\r\n                this.warHelper(arr, false, index);\r\n                warring = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    warHelper = (arr, playerWon, index) => {\r\n        console.log(\"Given Array \" + arr)\r\n        let playerDeck = this.props.player;\r\n        console.log(\"Player Deck \" + playerDeck)\r\n        let botDeck = this.props.bot;\r\n        console.log(\"Bot Deck \" + botDeck)\r\n        for (let i = index; i > 1; i--) {\r\n            arr.push(playerDeck[playerDeck.length - i]);\r\n            arr.push(botDeck[botDeck.length - i]);\r\n        }\r\n        console.log(\"Returning array\" + arr)\r\n        for (let i = index; i > 0; i--)\r\n            this.props.pop();\r\n        this.props.warUpdate(arr, playerWon);\r\n    }\r\n\r\n    handleNewGame = () => {\r\n        this.props.newGame()\r\n    }\r\n\r\n    handlePlaceCard = () => {\r\n        let playerCard = this.props.player[this.props.player.length - 1];\r\n        let botCard = this.props.bot[this.props.bot.length - 1];\r\n        this.compareCards(playerCard, botCard)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button onClick={() => this.handleNewGame()}> New Game</Button>\r\n                <Button onClick={() => this.handlePlaceCard()}> Place Card Down!</Button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n}","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport War from './War';\r\n\r\n\r\nexport default class Deck extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            player: [],\r\n            bot: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    popPlayerDecks = () => {\r\n        let play = this.state.player;\r\n        let botDeck = this.state.bot;\r\n        play.pop()\r\n        botDeck.pop()\r\n        this.setState({ player: play, bot: botDeck });\r\n    }\r\n\r\n    warUpdate = (arr, playerWon) => {\r\n        if (playerWon) {\r\n            let playerDeck = this.state.player;\r\n            playerDeck.unshift(arr);\r\n            this.setState({ player: playerDeck });\r\n        } else {\r\n            let botDeck = this.state.bot;\r\n            botDeck.unshift(arr);\r\n            this.setState({ player: botDeck });\r\n        }\r\n    }\r\n\r\n    updateDecks = (value1, value2, playerWon) => {\r\n        if (playerWon) {\r\n            let playerDeck = this.state.player;\r\n            playerDeck.unshift(value1, value2);\r\n            this.setState({ player: playerDeck });\r\n        } else {\r\n            let botDeck = this.state.bot;\r\n            botDeck.unshift(value1, value2);\r\n            this.setState({ player: botDeck });\r\n        }\r\n    }\r\n\r\n    generateNewDeck = () => {\r\n        let arr = []\r\n        for (let i = 1; i <= 13; i++)\r\n            for (let j = 0; j < 4; j++)\r\n                arr.push(i);\r\n        arr = this.shuffle(arr)\r\n        this.setState({ player: arr.slice(0, 26), bot: arr.slice(26, 53) });\r\n    }\r\n\r\n    shuffle = array => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <War newGame={this.generateNewDeck} player={this.state.player} bot={this.state.bot} pop={this.popPlayerDecks} updateDeck={this.updateDecks} warUpdate={this.warUpdate} />\r\n                <div>\r\n                    Player:\r\n                    {this.state.player.map(card => {\r\n                    return <CardBody value={card} />\r\n                })}\r\n                    Bot:\r\n                    {this.state.bot.map(card => {\r\n                    return <CardBody value={card} />\r\n                })}\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction CardBody(props) {\r\n\r\n    return (\r\n        <Card variant='danger' border='primary'>\r\n            <Card.Body>{props.value}</Card.Body>\r\n        </Card>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport Deck from './components/Deck';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}